// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DevicesColumns holds the columns for the "devices" table.
	DevicesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "ip", Type: field.TypeString},
		{Name: "device", Type: field.TypeString},
		{Name: "users_devices", Type: field.TypeUint64, Nullable: true},
	}
	// DevicesTable holds the schema information for the "devices" table.
	DevicesTable = &schema.Table{
		Name:       "devices",
		Columns:    DevicesColumns,
		PrimaryKey: []*schema.Column{DevicesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "devices_users_devices",
				Columns:    []*schema.Column{DevicesColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DirsColumns holds the columns for the "dirs" table.
	DirsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "users_dirs", Type: field.TypeUint64, Nullable: true},
	}
	// DirsTable holds the schema information for the "dirs" table.
	DirsTable = &schema.Table{
		Name:       "dirs",
		Columns:    DirsColumns,
		PrimaryKey: []*schema.Column{DirsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "dirs_users_dirs",
				Columns:    []*schema.Column{DirsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// FilesColumns holds the columns for the "files" table.
	FilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "hash", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "size", Type: field.TypeUint64},
	}
	// FilesTable holds the schema information for the "files" table.
	FilesTable = &schema.Table{
		Name:       "files",
		Columns:    FilesColumns,
		PrimaryKey: []*schema.Column{FilesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "files_hash",
				Unique:  true,
				Columns: []*schema.Column{FilesColumns[1]},
			},
		},
	}
	// SavesColumns holds the columns for the "saves" table.
	SavesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 255},
		{Name: "caption", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "files_saves", Type: field.TypeUint64, Nullable: true},
		{Name: "users_saves", Type: field.TypeUint64, Nullable: true},
	}
	// SavesTable holds the schema information for the "saves" table.
	SavesTable = &schema.Table{
		Name:       "saves",
		Columns:    SavesColumns,
		PrimaryKey: []*schema.Column{SavesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "saves_files_saves",
				Columns:    []*schema.Column{SavesColumns[5]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "saves_users_saves",
				Columns:    []*schema.Column{SavesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "username", Type: field.TypeString, Unique: true, Size: 255},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "bio", Type: field.TypeString, Nullable: true},
		{Name: "avatar", Type: field.TypeString, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// DirsSavesColumns holds the columns for the "dirs_saves" table.
	DirsSavesColumns = []*schema.Column{
		{Name: "dirs_id", Type: field.TypeUint64},
		{Name: "saves_id", Type: field.TypeUint64},
	}
	// DirsSavesTable holds the schema information for the "dirs_saves" table.
	DirsSavesTable = &schema.Table{
		Name:       "dirs_saves",
		Columns:    DirsSavesColumns,
		PrimaryKey: []*schema.Column{DirsSavesColumns[0], DirsSavesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "dirs_saves_dirs_id",
				Columns:    []*schema.Column{DirsSavesColumns[0]},
				RefColumns: []*schema.Column{DirsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "dirs_saves_saves_id",
				Columns:    []*schema.Column{DirsSavesColumns[1]},
				RefColumns: []*schema.Column{SavesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DirsSubdirColumns holds the columns for the "dirs_subdir" table.
	DirsSubdirColumns = []*schema.Column{
		{Name: "dirs_id", Type: field.TypeUint64},
		{Name: "pdir_id", Type: field.TypeUint64},
	}
	// DirsSubdirTable holds the schema information for the "dirs_subdir" table.
	DirsSubdirTable = &schema.Table{
		Name:       "dirs_subdir",
		Columns:    DirsSubdirColumns,
		PrimaryKey: []*schema.Column{DirsSubdirColumns[0], DirsSubdirColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "dirs_subdir_dirs_id",
				Columns:    []*schema.Column{DirsSubdirColumns[0]},
				RefColumns: []*schema.Column{DirsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "dirs_subdir_pdir_id",
				Columns:    []*schema.Column{DirsSubdirColumns[1]},
				RefColumns: []*schema.Column{DirsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DevicesTable,
		DirsTable,
		FilesTable,
		SavesTable,
		UsersTable,
		DirsSavesTable,
		DirsSubdirTable,
	}
)

func init() {
	DevicesTable.ForeignKeys[0].RefTable = UsersTable
	DirsTable.ForeignKeys[0].RefTable = UsersTable
	SavesTable.ForeignKeys[0].RefTable = FilesTable
	SavesTable.ForeignKeys[1].RefTable = UsersTable
	DirsSavesTable.ForeignKeys[0].RefTable = DirsTable
	DirsSavesTable.ForeignKeys[1].RefTable = SavesTable
	DirsSubdirTable.ForeignKeys[0].RefTable = DirsTable
	DirsSubdirTable.ForeignKeys[1].RefTable = DirsTable
}
