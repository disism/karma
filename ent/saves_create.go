// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/disism/karma/ent/dirs"
	"github.com/disism/karma/ent/files"
	"github.com/disism/karma/ent/saves"
	"github.com/disism/karma/ent/users"
)

// SavesCreate is the builder for creating a Saves entity.
type SavesCreate struct {
	config
	mutation *SavesMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (sc *SavesCreate) SetCreateTime(t time.Time) *SavesCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sc *SavesCreate) SetNillableCreateTime(t *time.Time) *SavesCreate {
	if t != nil {
		sc.SetCreateTime(*t)
	}
	return sc
}

// SetUpdateTime sets the "update_time" field.
func (sc *SavesCreate) SetUpdateTime(t time.Time) *SavesCreate {
	sc.mutation.SetUpdateTime(t)
	return sc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sc *SavesCreate) SetNillableUpdateTime(t *time.Time) *SavesCreate {
	if t != nil {
		sc.SetUpdateTime(*t)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *SavesCreate) SetName(s string) *SavesCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetCaption sets the "caption" field.
func (sc *SavesCreate) SetCaption(s string) *SavesCreate {
	sc.mutation.SetCaption(s)
	return sc
}

// SetNillableCaption sets the "caption" field if the given value is not nil.
func (sc *SavesCreate) SetNillableCaption(s *string) *SavesCreate {
	if s != nil {
		sc.SetCaption(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SavesCreate) SetID(u uint64) *SavesCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetFileID sets the "file" edge to the Files entity by ID.
func (sc *SavesCreate) SetFileID(id uint64) *SavesCreate {
	sc.mutation.SetFileID(id)
	return sc
}

// SetNillableFileID sets the "file" edge to the Files entity by ID if the given value is not nil.
func (sc *SavesCreate) SetNillableFileID(id *uint64) *SavesCreate {
	if id != nil {
		sc = sc.SetFileID(*id)
	}
	return sc
}

// SetFile sets the "file" edge to the Files entity.
func (sc *SavesCreate) SetFile(f *Files) *SavesCreate {
	return sc.SetFileID(f.ID)
}

// SetOwnerID sets the "owner" edge to the Users entity by ID.
func (sc *SavesCreate) SetOwnerID(id uint64) *SavesCreate {
	sc.mutation.SetOwnerID(id)
	return sc
}

// SetNillableOwnerID sets the "owner" edge to the Users entity by ID if the given value is not nil.
func (sc *SavesCreate) SetNillableOwnerID(id *uint64) *SavesCreate {
	if id != nil {
		sc = sc.SetOwnerID(*id)
	}
	return sc
}

// SetOwner sets the "owner" edge to the Users entity.
func (sc *SavesCreate) SetOwner(u *Users) *SavesCreate {
	return sc.SetOwnerID(u.ID)
}

// AddDirIDs adds the "dir" edge to the Dirs entity by IDs.
func (sc *SavesCreate) AddDirIDs(ids ...uint64) *SavesCreate {
	sc.mutation.AddDirIDs(ids...)
	return sc
}

// AddDir adds the "dir" edges to the Dirs entity.
func (sc *SavesCreate) AddDir(d ...*Dirs) *SavesCreate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return sc.AddDirIDs(ids...)
}

// Mutation returns the SavesMutation object of the builder.
func (sc *SavesCreate) Mutation() *SavesMutation {
	return sc.mutation
}

// Save creates the Saves in the database.
func (sc *SavesCreate) Save(ctx context.Context) (*Saves, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SavesCreate) SaveX(ctx context.Context) *Saves {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SavesCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SavesCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SavesCreate) defaults() {
	if _, ok := sc.mutation.CreateTime(); !ok {
		v := saves.DefaultCreateTime()
		sc.mutation.SetCreateTime(v)
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		v := saves.DefaultUpdateTime()
		sc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SavesCreate) check() error {
	if _, ok := sc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Saves.create_time"`)}
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Saves.update_time"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Saves.name"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := saves.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Saves.name": %w`, err)}
		}
	}
	if v, ok := sc.mutation.Caption(); ok {
		if err := saves.CaptionValidator(v); err != nil {
			return &ValidationError{Name: "caption", err: fmt.Errorf(`ent: validator failed for field "Saves.caption": %w`, err)}
		}
	}
	return nil
}

func (sc *SavesCreate) sqlSave(ctx context.Context) (*Saves, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SavesCreate) createSpec() (*Saves, *sqlgraph.CreateSpec) {
	var (
		_node = &Saves{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(saves.Table, sqlgraph.NewFieldSpec(saves.FieldID, field.TypeUint64))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.SetField(saves.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.UpdateTime(); ok {
		_spec.SetField(saves.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(saves.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Caption(); ok {
		_spec.SetField(saves.FieldCaption, field.TypeString, value)
		_node.Caption = value
	}
	if nodes := sc.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   saves.FileTable,
			Columns: []string{saves.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(files.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.files_saves = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   saves.OwnerTable,
			Columns: []string{saves.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.users_saves = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.DirIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   saves.DirTable,
			Columns: saves.DirPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SavesCreateBulk is the builder for creating many Saves entities in bulk.
type SavesCreateBulk struct {
	config
	err      error
	builders []*SavesCreate
}

// Save creates the Saves entities in the database.
func (scb *SavesCreateBulk) Save(ctx context.Context) ([]*Saves, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Saves, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SavesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SavesCreateBulk) SaveX(ctx context.Context) []*Saves {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SavesCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SavesCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
