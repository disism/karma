// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/disism/karma/ent/dirs"
	"github.com/disism/karma/ent/files"
	"github.com/disism/karma/ent/predicate"
	"github.com/disism/karma/ent/saves"
	"github.com/disism/karma/ent/users"
)

// SavesUpdate is the builder for updating Saves entities.
type SavesUpdate struct {
	config
	hooks    []Hook
	mutation *SavesMutation
}

// Where appends a list predicates to the SavesUpdate builder.
func (su *SavesUpdate) Where(ps ...predicate.Saves) *SavesUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdateTime sets the "update_time" field.
func (su *SavesUpdate) SetUpdateTime(t time.Time) *SavesUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// SetName sets the "name" field.
func (su *SavesUpdate) SetName(s string) *SavesUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SavesUpdate) SetNillableName(s *string) *SavesUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetCaption sets the "caption" field.
func (su *SavesUpdate) SetCaption(s string) *SavesUpdate {
	su.mutation.SetCaption(s)
	return su
}

// SetNillableCaption sets the "caption" field if the given value is not nil.
func (su *SavesUpdate) SetNillableCaption(s *string) *SavesUpdate {
	if s != nil {
		su.SetCaption(*s)
	}
	return su
}

// ClearCaption clears the value of the "caption" field.
func (su *SavesUpdate) ClearCaption() *SavesUpdate {
	su.mutation.ClearCaption()
	return su
}

// SetFileID sets the "file" edge to the Files entity by ID.
func (su *SavesUpdate) SetFileID(id uint64) *SavesUpdate {
	su.mutation.SetFileID(id)
	return su
}

// SetNillableFileID sets the "file" edge to the Files entity by ID if the given value is not nil.
func (su *SavesUpdate) SetNillableFileID(id *uint64) *SavesUpdate {
	if id != nil {
		su = su.SetFileID(*id)
	}
	return su
}

// SetFile sets the "file" edge to the Files entity.
func (su *SavesUpdate) SetFile(f *Files) *SavesUpdate {
	return su.SetFileID(f.ID)
}

// SetOwnerID sets the "owner" edge to the Users entity by ID.
func (su *SavesUpdate) SetOwnerID(id uint64) *SavesUpdate {
	su.mutation.SetOwnerID(id)
	return su
}

// SetNillableOwnerID sets the "owner" edge to the Users entity by ID if the given value is not nil.
func (su *SavesUpdate) SetNillableOwnerID(id *uint64) *SavesUpdate {
	if id != nil {
		su = su.SetOwnerID(*id)
	}
	return su
}

// SetOwner sets the "owner" edge to the Users entity.
func (su *SavesUpdate) SetOwner(u *Users) *SavesUpdate {
	return su.SetOwnerID(u.ID)
}

// AddDirIDs adds the "dir" edge to the Dirs entity by IDs.
func (su *SavesUpdate) AddDirIDs(ids ...uint64) *SavesUpdate {
	su.mutation.AddDirIDs(ids...)
	return su
}

// AddDir adds the "dir" edges to the Dirs entity.
func (su *SavesUpdate) AddDir(d ...*Dirs) *SavesUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return su.AddDirIDs(ids...)
}

// Mutation returns the SavesMutation object of the builder.
func (su *SavesUpdate) Mutation() *SavesMutation {
	return su.mutation
}

// ClearFile clears the "file" edge to the Files entity.
func (su *SavesUpdate) ClearFile() *SavesUpdate {
	su.mutation.ClearFile()
	return su
}

// ClearOwner clears the "owner" edge to the Users entity.
func (su *SavesUpdate) ClearOwner() *SavesUpdate {
	su.mutation.ClearOwner()
	return su
}

// ClearDir clears all "dir" edges to the Dirs entity.
func (su *SavesUpdate) ClearDir() *SavesUpdate {
	su.mutation.ClearDir()
	return su
}

// RemoveDirIDs removes the "dir" edge to Dirs entities by IDs.
func (su *SavesUpdate) RemoveDirIDs(ids ...uint64) *SavesUpdate {
	su.mutation.RemoveDirIDs(ids...)
	return su
}

// RemoveDir removes "dir" edges to Dirs entities.
func (su *SavesUpdate) RemoveDir(d ...*Dirs) *SavesUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return su.RemoveDirIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SavesUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SavesUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SavesUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SavesUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SavesUpdate) defaults() {
	if _, ok := su.mutation.UpdateTime(); !ok {
		v := saves.UpdateDefaultUpdateTime()
		su.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SavesUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := saves.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Saves.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Caption(); ok {
		if err := saves.CaptionValidator(v); err != nil {
			return &ValidationError{Name: "caption", err: fmt.Errorf(`ent: validator failed for field "Saves.caption": %w`, err)}
		}
	}
	return nil
}

func (su *SavesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(saves.Table, saves.Columns, sqlgraph.NewFieldSpec(saves.FieldID, field.TypeUint64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.SetField(saves.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(saves.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Caption(); ok {
		_spec.SetField(saves.FieldCaption, field.TypeString, value)
	}
	if su.mutation.CaptionCleared() {
		_spec.ClearField(saves.FieldCaption, field.TypeString)
	}
	if su.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   saves.FileTable,
			Columns: []string{saves.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(files.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   saves.FileTable,
			Columns: []string{saves.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(files.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   saves.OwnerTable,
			Columns: []string{saves.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   saves.OwnerTable,
			Columns: []string{saves.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.DirCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   saves.DirTable,
			Columns: saves.DirPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedDirIDs(); len(nodes) > 0 && !su.mutation.DirCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   saves.DirTable,
			Columns: saves.DirPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DirIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   saves.DirTable,
			Columns: saves.DirPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{saves.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SavesUpdateOne is the builder for updating a single Saves entity.
type SavesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SavesMutation
}

// SetUpdateTime sets the "update_time" field.
func (suo *SavesUpdateOne) SetUpdateTime(t time.Time) *SavesUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// SetName sets the "name" field.
func (suo *SavesUpdateOne) SetName(s string) *SavesUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SavesUpdateOne) SetNillableName(s *string) *SavesUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetCaption sets the "caption" field.
func (suo *SavesUpdateOne) SetCaption(s string) *SavesUpdateOne {
	suo.mutation.SetCaption(s)
	return suo
}

// SetNillableCaption sets the "caption" field if the given value is not nil.
func (suo *SavesUpdateOne) SetNillableCaption(s *string) *SavesUpdateOne {
	if s != nil {
		suo.SetCaption(*s)
	}
	return suo
}

// ClearCaption clears the value of the "caption" field.
func (suo *SavesUpdateOne) ClearCaption() *SavesUpdateOne {
	suo.mutation.ClearCaption()
	return suo
}

// SetFileID sets the "file" edge to the Files entity by ID.
func (suo *SavesUpdateOne) SetFileID(id uint64) *SavesUpdateOne {
	suo.mutation.SetFileID(id)
	return suo
}

// SetNillableFileID sets the "file" edge to the Files entity by ID if the given value is not nil.
func (suo *SavesUpdateOne) SetNillableFileID(id *uint64) *SavesUpdateOne {
	if id != nil {
		suo = suo.SetFileID(*id)
	}
	return suo
}

// SetFile sets the "file" edge to the Files entity.
func (suo *SavesUpdateOne) SetFile(f *Files) *SavesUpdateOne {
	return suo.SetFileID(f.ID)
}

// SetOwnerID sets the "owner" edge to the Users entity by ID.
func (suo *SavesUpdateOne) SetOwnerID(id uint64) *SavesUpdateOne {
	suo.mutation.SetOwnerID(id)
	return suo
}

// SetNillableOwnerID sets the "owner" edge to the Users entity by ID if the given value is not nil.
func (suo *SavesUpdateOne) SetNillableOwnerID(id *uint64) *SavesUpdateOne {
	if id != nil {
		suo = suo.SetOwnerID(*id)
	}
	return suo
}

// SetOwner sets the "owner" edge to the Users entity.
func (suo *SavesUpdateOne) SetOwner(u *Users) *SavesUpdateOne {
	return suo.SetOwnerID(u.ID)
}

// AddDirIDs adds the "dir" edge to the Dirs entity by IDs.
func (suo *SavesUpdateOne) AddDirIDs(ids ...uint64) *SavesUpdateOne {
	suo.mutation.AddDirIDs(ids...)
	return suo
}

// AddDir adds the "dir" edges to the Dirs entity.
func (suo *SavesUpdateOne) AddDir(d ...*Dirs) *SavesUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return suo.AddDirIDs(ids...)
}

// Mutation returns the SavesMutation object of the builder.
func (suo *SavesUpdateOne) Mutation() *SavesMutation {
	return suo.mutation
}

// ClearFile clears the "file" edge to the Files entity.
func (suo *SavesUpdateOne) ClearFile() *SavesUpdateOne {
	suo.mutation.ClearFile()
	return suo
}

// ClearOwner clears the "owner" edge to the Users entity.
func (suo *SavesUpdateOne) ClearOwner() *SavesUpdateOne {
	suo.mutation.ClearOwner()
	return suo
}

// ClearDir clears all "dir" edges to the Dirs entity.
func (suo *SavesUpdateOne) ClearDir() *SavesUpdateOne {
	suo.mutation.ClearDir()
	return suo
}

// RemoveDirIDs removes the "dir" edge to Dirs entities by IDs.
func (suo *SavesUpdateOne) RemoveDirIDs(ids ...uint64) *SavesUpdateOne {
	suo.mutation.RemoveDirIDs(ids...)
	return suo
}

// RemoveDir removes "dir" edges to Dirs entities.
func (suo *SavesUpdateOne) RemoveDir(d ...*Dirs) *SavesUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return suo.RemoveDirIDs(ids...)
}

// Where appends a list predicates to the SavesUpdate builder.
func (suo *SavesUpdateOne) Where(ps ...predicate.Saves) *SavesUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SavesUpdateOne) Select(field string, fields ...string) *SavesUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Saves entity.
func (suo *SavesUpdateOne) Save(ctx context.Context) (*Saves, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SavesUpdateOne) SaveX(ctx context.Context) *Saves {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SavesUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SavesUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SavesUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdateTime(); !ok {
		v := saves.UpdateDefaultUpdateTime()
		suo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SavesUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := saves.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Saves.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Caption(); ok {
		if err := saves.CaptionValidator(v); err != nil {
			return &ValidationError{Name: "caption", err: fmt.Errorf(`ent: validator failed for field "Saves.caption": %w`, err)}
		}
	}
	return nil
}

func (suo *SavesUpdateOne) sqlSave(ctx context.Context) (_node *Saves, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(saves.Table, saves.Columns, sqlgraph.NewFieldSpec(saves.FieldID, field.TypeUint64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Saves.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, saves.FieldID)
		for _, f := range fields {
			if !saves.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != saves.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.SetField(saves.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(saves.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Caption(); ok {
		_spec.SetField(saves.FieldCaption, field.TypeString, value)
	}
	if suo.mutation.CaptionCleared() {
		_spec.ClearField(saves.FieldCaption, field.TypeString)
	}
	if suo.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   saves.FileTable,
			Columns: []string{saves.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(files.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   saves.FileTable,
			Columns: []string{saves.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(files.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   saves.OwnerTable,
			Columns: []string{saves.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   saves.OwnerTable,
			Columns: []string{saves.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.DirCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   saves.DirTable,
			Columns: saves.DirPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedDirIDs(); len(nodes) > 0 && !suo.mutation.DirCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   saves.DirTable,
			Columns: saves.DirPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DirIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   saves.DirTable,
			Columns: saves.DirPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Saves{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{saves.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
