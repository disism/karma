// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/disism/karma/ent/devices"
	"github.com/disism/karma/ent/dirs"
	"github.com/disism/karma/ent/files"
	"github.com/disism/karma/ent/predicate"
	"github.com/disism/karma/ent/saves"
	"github.com/disism/karma/ent/users"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDevices = "Devices"
	TypeDirs    = "Dirs"
	TypeFiles   = "Files"
	TypeSaves   = "Saves"
	TypeUsers   = "Users"
)

// DevicesMutation represents an operation that mutates the Devices nodes in the graph.
type DevicesMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	create_time   *time.Time
	update_time   *time.Time
	ip            *string
	device        *string
	clearedFields map[string]struct{}
	user          *uint64
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Devices, error)
	predicates    []predicate.Devices
}

var _ ent.Mutation = (*DevicesMutation)(nil)

// devicesOption allows management of the mutation configuration using functional options.
type devicesOption func(*DevicesMutation)

// newDevicesMutation creates new mutation for the Devices entity.
func newDevicesMutation(c config, op Op, opts ...devicesOption) *DevicesMutation {
	m := &DevicesMutation{
		config:        c,
		op:            op,
		typ:           TypeDevices,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDevicesID sets the ID field of the mutation.
func withDevicesID(id uint64) devicesOption {
	return func(m *DevicesMutation) {
		var (
			err   error
			once  sync.Once
			value *Devices
		)
		m.oldValue = func(ctx context.Context) (*Devices, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Devices.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDevices sets the old Devices of the mutation.
func withDevices(node *Devices) devicesOption {
	return func(m *DevicesMutation) {
		m.oldValue = func(context.Context) (*Devices, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DevicesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DevicesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Devices entities.
func (m *DevicesMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DevicesMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DevicesMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Devices.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *DevicesMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *DevicesMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Devices entity.
// If the Devices object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevicesMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *DevicesMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *DevicesMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *DevicesMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Devices entity.
// If the Devices object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevicesMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *DevicesMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetIP sets the "ip" field.
func (m *DevicesMutation) SetIP(s string) {
	m.ip = &s
}

// IP returns the value of the "ip" field in the mutation.
func (m *DevicesMutation) IP() (r string, exists bool) {
	v := m.ip
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "ip" field's value of the Devices entity.
// If the Devices object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevicesMutation) OldIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// ResetIP resets all changes to the "ip" field.
func (m *DevicesMutation) ResetIP() {
	m.ip = nil
}

// SetDevice sets the "device" field.
func (m *DevicesMutation) SetDevice(s string) {
	m.device = &s
}

// Device returns the value of the "device" field in the mutation.
func (m *DevicesMutation) Device() (r string, exists bool) {
	v := m.device
	if v == nil {
		return
	}
	return *v, true
}

// OldDevice returns the old "device" field's value of the Devices entity.
// If the Devices object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevicesMutation) OldDevice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDevice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDevice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDevice: %w", err)
	}
	return oldValue.Device, nil
}

// ResetDevice resets all changes to the "device" field.
func (m *DevicesMutation) ResetDevice() {
	m.device = nil
}

// SetUserID sets the "user" edge to the Users entity by id.
func (m *DevicesMutation) SetUserID(id uint64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the Users entity.
func (m *DevicesMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the Users entity was cleared.
func (m *DevicesMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *DevicesMutation) UserID() (id uint64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *DevicesMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *DevicesMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the DevicesMutation builder.
func (m *DevicesMutation) Where(ps ...predicate.Devices) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DevicesMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DevicesMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Devices, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DevicesMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DevicesMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Devices).
func (m *DevicesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DevicesMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, devices.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, devices.FieldUpdateTime)
	}
	if m.ip != nil {
		fields = append(fields, devices.FieldIP)
	}
	if m.device != nil {
		fields = append(fields, devices.FieldDevice)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DevicesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case devices.FieldCreateTime:
		return m.CreateTime()
	case devices.FieldUpdateTime:
		return m.UpdateTime()
	case devices.FieldIP:
		return m.IP()
	case devices.FieldDevice:
		return m.Device()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DevicesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case devices.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case devices.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case devices.FieldIP:
		return m.OldIP(ctx)
	case devices.FieldDevice:
		return m.OldDevice(ctx)
	}
	return nil, fmt.Errorf("unknown Devices field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DevicesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case devices.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case devices.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case devices.FieldIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	case devices.FieldDevice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDevice(v)
		return nil
	}
	return fmt.Errorf("unknown Devices field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DevicesMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DevicesMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DevicesMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Devices numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DevicesMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DevicesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DevicesMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Devices nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DevicesMutation) ResetField(name string) error {
	switch name {
	case devices.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case devices.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case devices.FieldIP:
		m.ResetIP()
		return nil
	case devices.FieldDevice:
		m.ResetDevice()
		return nil
	}
	return fmt.Errorf("unknown Devices field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DevicesMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, devices.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DevicesMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case devices.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DevicesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DevicesMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DevicesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, devices.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DevicesMutation) EdgeCleared(name string) bool {
	switch name {
	case devices.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DevicesMutation) ClearEdge(name string) error {
	switch name {
	case devices.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Devices unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DevicesMutation) ResetEdge(name string) error {
	switch name {
	case devices.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Devices edge %s", name)
}

// DirsMutation represents an operation that mutates the Dirs nodes in the graph.
type DirsMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	create_time   *time.Time
	update_time   *time.Time
	name          *string
	clearedFields map[string]struct{}
	owner         *uint64
	clearedowner  bool
	saves         map[uint64]struct{}
	removedsaves  map[uint64]struct{}
	clearedsaves  bool
	subdir        map[uint64]struct{}
	removedsubdir map[uint64]struct{}
	clearedsubdir bool
	pdir          map[uint64]struct{}
	removedpdir   map[uint64]struct{}
	clearedpdir   bool
	done          bool
	oldValue      func(context.Context) (*Dirs, error)
	predicates    []predicate.Dirs
}

var _ ent.Mutation = (*DirsMutation)(nil)

// dirsOption allows management of the mutation configuration using functional options.
type dirsOption func(*DirsMutation)

// newDirsMutation creates new mutation for the Dirs entity.
func newDirsMutation(c config, op Op, opts ...dirsOption) *DirsMutation {
	m := &DirsMutation{
		config:        c,
		op:            op,
		typ:           TypeDirs,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDirsID sets the ID field of the mutation.
func withDirsID(id uint64) dirsOption {
	return func(m *DirsMutation) {
		var (
			err   error
			once  sync.Once
			value *Dirs
		)
		m.oldValue = func(ctx context.Context) (*Dirs, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Dirs.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDirs sets the old Dirs of the mutation.
func withDirs(node *Dirs) dirsOption {
	return func(m *DirsMutation) {
		m.oldValue = func(context.Context) (*Dirs, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DirsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DirsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Dirs entities.
func (m *DirsMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DirsMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DirsMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Dirs.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *DirsMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *DirsMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Dirs entity.
// If the Dirs object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DirsMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *DirsMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *DirsMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *DirsMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Dirs entity.
// If the Dirs object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DirsMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *DirsMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *DirsMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DirsMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Dirs entity.
// If the Dirs object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DirsMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DirsMutation) ResetName() {
	m.name = nil
}

// SetOwnerID sets the "owner" edge to the Users entity by id.
func (m *DirsMutation) SetOwnerID(id uint64) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the Users entity.
func (m *DirsMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the Users entity was cleared.
func (m *DirsMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *DirsMutation) OwnerID() (id uint64, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *DirsMutation) OwnerIDs() (ids []uint64) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *DirsMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddSafeIDs adds the "saves" edge to the Saves entity by ids.
func (m *DirsMutation) AddSafeIDs(ids ...uint64) {
	if m.saves == nil {
		m.saves = make(map[uint64]struct{})
	}
	for i := range ids {
		m.saves[ids[i]] = struct{}{}
	}
}

// ClearSaves clears the "saves" edge to the Saves entity.
func (m *DirsMutation) ClearSaves() {
	m.clearedsaves = true
}

// SavesCleared reports if the "saves" edge to the Saves entity was cleared.
func (m *DirsMutation) SavesCleared() bool {
	return m.clearedsaves
}

// RemoveSafeIDs removes the "saves" edge to the Saves entity by IDs.
func (m *DirsMutation) RemoveSafeIDs(ids ...uint64) {
	if m.removedsaves == nil {
		m.removedsaves = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.saves, ids[i])
		m.removedsaves[ids[i]] = struct{}{}
	}
}

// RemovedSaves returns the removed IDs of the "saves" edge to the Saves entity.
func (m *DirsMutation) RemovedSavesIDs() (ids []uint64) {
	for id := range m.removedsaves {
		ids = append(ids, id)
	}
	return
}

// SavesIDs returns the "saves" edge IDs in the mutation.
func (m *DirsMutation) SavesIDs() (ids []uint64) {
	for id := range m.saves {
		ids = append(ids, id)
	}
	return
}

// ResetSaves resets all changes to the "saves" edge.
func (m *DirsMutation) ResetSaves() {
	m.saves = nil
	m.clearedsaves = false
	m.removedsaves = nil
}

// AddSubdirIDs adds the "subdir" edge to the Dirs entity by ids.
func (m *DirsMutation) AddSubdirIDs(ids ...uint64) {
	if m.subdir == nil {
		m.subdir = make(map[uint64]struct{})
	}
	for i := range ids {
		m.subdir[ids[i]] = struct{}{}
	}
}

// ClearSubdir clears the "subdir" edge to the Dirs entity.
func (m *DirsMutation) ClearSubdir() {
	m.clearedsubdir = true
}

// SubdirCleared reports if the "subdir" edge to the Dirs entity was cleared.
func (m *DirsMutation) SubdirCleared() bool {
	return m.clearedsubdir
}

// RemoveSubdirIDs removes the "subdir" edge to the Dirs entity by IDs.
func (m *DirsMutation) RemoveSubdirIDs(ids ...uint64) {
	if m.removedsubdir == nil {
		m.removedsubdir = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.subdir, ids[i])
		m.removedsubdir[ids[i]] = struct{}{}
	}
}

// RemovedSubdir returns the removed IDs of the "subdir" edge to the Dirs entity.
func (m *DirsMutation) RemovedSubdirIDs() (ids []uint64) {
	for id := range m.removedsubdir {
		ids = append(ids, id)
	}
	return
}

// SubdirIDs returns the "subdir" edge IDs in the mutation.
func (m *DirsMutation) SubdirIDs() (ids []uint64) {
	for id := range m.subdir {
		ids = append(ids, id)
	}
	return
}

// ResetSubdir resets all changes to the "subdir" edge.
func (m *DirsMutation) ResetSubdir() {
	m.subdir = nil
	m.clearedsubdir = false
	m.removedsubdir = nil
}

// AddPdirIDs adds the "pdir" edge to the Dirs entity by ids.
func (m *DirsMutation) AddPdirIDs(ids ...uint64) {
	if m.pdir == nil {
		m.pdir = make(map[uint64]struct{})
	}
	for i := range ids {
		m.pdir[ids[i]] = struct{}{}
	}
}

// ClearPdir clears the "pdir" edge to the Dirs entity.
func (m *DirsMutation) ClearPdir() {
	m.clearedpdir = true
}

// PdirCleared reports if the "pdir" edge to the Dirs entity was cleared.
func (m *DirsMutation) PdirCleared() bool {
	return m.clearedpdir
}

// RemovePdirIDs removes the "pdir" edge to the Dirs entity by IDs.
func (m *DirsMutation) RemovePdirIDs(ids ...uint64) {
	if m.removedpdir == nil {
		m.removedpdir = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.pdir, ids[i])
		m.removedpdir[ids[i]] = struct{}{}
	}
}

// RemovedPdir returns the removed IDs of the "pdir" edge to the Dirs entity.
func (m *DirsMutation) RemovedPdirIDs() (ids []uint64) {
	for id := range m.removedpdir {
		ids = append(ids, id)
	}
	return
}

// PdirIDs returns the "pdir" edge IDs in the mutation.
func (m *DirsMutation) PdirIDs() (ids []uint64) {
	for id := range m.pdir {
		ids = append(ids, id)
	}
	return
}

// ResetPdir resets all changes to the "pdir" edge.
func (m *DirsMutation) ResetPdir() {
	m.pdir = nil
	m.clearedpdir = false
	m.removedpdir = nil
}

// Where appends a list predicates to the DirsMutation builder.
func (m *DirsMutation) Where(ps ...predicate.Dirs) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DirsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DirsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Dirs, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DirsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DirsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Dirs).
func (m *DirsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DirsMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, dirs.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, dirs.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, dirs.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DirsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dirs.FieldCreateTime:
		return m.CreateTime()
	case dirs.FieldUpdateTime:
		return m.UpdateTime()
	case dirs.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DirsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dirs.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case dirs.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case dirs.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Dirs field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DirsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dirs.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case dirs.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case dirs.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Dirs field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DirsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DirsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DirsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Dirs numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DirsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DirsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DirsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Dirs nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DirsMutation) ResetField(name string) error {
	switch name {
	case dirs.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case dirs.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case dirs.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Dirs field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DirsMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.owner != nil {
		edges = append(edges, dirs.EdgeOwner)
	}
	if m.saves != nil {
		edges = append(edges, dirs.EdgeSaves)
	}
	if m.subdir != nil {
		edges = append(edges, dirs.EdgeSubdir)
	}
	if m.pdir != nil {
		edges = append(edges, dirs.EdgePdir)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DirsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dirs.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case dirs.EdgeSaves:
		ids := make([]ent.Value, 0, len(m.saves))
		for id := range m.saves {
			ids = append(ids, id)
		}
		return ids
	case dirs.EdgeSubdir:
		ids := make([]ent.Value, 0, len(m.subdir))
		for id := range m.subdir {
			ids = append(ids, id)
		}
		return ids
	case dirs.EdgePdir:
		ids := make([]ent.Value, 0, len(m.pdir))
		for id := range m.pdir {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DirsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedsaves != nil {
		edges = append(edges, dirs.EdgeSaves)
	}
	if m.removedsubdir != nil {
		edges = append(edges, dirs.EdgeSubdir)
	}
	if m.removedpdir != nil {
		edges = append(edges, dirs.EdgePdir)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DirsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dirs.EdgeSaves:
		ids := make([]ent.Value, 0, len(m.removedsaves))
		for id := range m.removedsaves {
			ids = append(ids, id)
		}
		return ids
	case dirs.EdgeSubdir:
		ids := make([]ent.Value, 0, len(m.removedsubdir))
		for id := range m.removedsubdir {
			ids = append(ids, id)
		}
		return ids
	case dirs.EdgePdir:
		ids := make([]ent.Value, 0, len(m.removedpdir))
		for id := range m.removedpdir {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DirsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedowner {
		edges = append(edges, dirs.EdgeOwner)
	}
	if m.clearedsaves {
		edges = append(edges, dirs.EdgeSaves)
	}
	if m.clearedsubdir {
		edges = append(edges, dirs.EdgeSubdir)
	}
	if m.clearedpdir {
		edges = append(edges, dirs.EdgePdir)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DirsMutation) EdgeCleared(name string) bool {
	switch name {
	case dirs.EdgeOwner:
		return m.clearedowner
	case dirs.EdgeSaves:
		return m.clearedsaves
	case dirs.EdgeSubdir:
		return m.clearedsubdir
	case dirs.EdgePdir:
		return m.clearedpdir
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DirsMutation) ClearEdge(name string) error {
	switch name {
	case dirs.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Dirs unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DirsMutation) ResetEdge(name string) error {
	switch name {
	case dirs.EdgeOwner:
		m.ResetOwner()
		return nil
	case dirs.EdgeSaves:
		m.ResetSaves()
		return nil
	case dirs.EdgeSubdir:
		m.ResetSubdir()
		return nil
	case dirs.EdgePdir:
		m.ResetPdir()
		return nil
	}
	return fmt.Errorf("unknown Dirs edge %s", name)
}

// FilesMutation represents an operation that mutates the Files nodes in the graph.
type FilesMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	hash          *string
	name          *string
	size          *uint64
	addsize       *int64
	clearedFields map[string]struct{}
	saves         map[uint64]struct{}
	removedsaves  map[uint64]struct{}
	clearedsaves  bool
	done          bool
	oldValue      func(context.Context) (*Files, error)
	predicates    []predicate.Files
}

var _ ent.Mutation = (*FilesMutation)(nil)

// filesOption allows management of the mutation configuration using functional options.
type filesOption func(*FilesMutation)

// newFilesMutation creates new mutation for the Files entity.
func newFilesMutation(c config, op Op, opts ...filesOption) *FilesMutation {
	m := &FilesMutation{
		config:        c,
		op:            op,
		typ:           TypeFiles,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFilesID sets the ID field of the mutation.
func withFilesID(id uint64) filesOption {
	return func(m *FilesMutation) {
		var (
			err   error
			once  sync.Once
			value *Files
		)
		m.oldValue = func(ctx context.Context) (*Files, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Files.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFiles sets the old Files of the mutation.
func withFiles(node *Files) filesOption {
	return func(m *FilesMutation) {
		m.oldValue = func(context.Context) (*Files, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FilesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FilesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Files entities.
func (m *FilesMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FilesMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FilesMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Files.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHash sets the "hash" field.
func (m *FilesMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *FilesMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the Files entity.
// If the Files object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilesMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *FilesMutation) ResetHash() {
	m.hash = nil
}

// SetName sets the "name" field.
func (m *FilesMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FilesMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Files entity.
// If the Files object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilesMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FilesMutation) ResetName() {
	m.name = nil
}

// SetSize sets the "size" field.
func (m *FilesMutation) SetSize(u uint64) {
	m.size = &u
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *FilesMutation) Size() (r uint64, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the Files entity.
// If the Files object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilesMutation) OldSize(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds u to the "size" field.
func (m *FilesMutation) AddSize(u int64) {
	if m.addsize != nil {
		*m.addsize += u
	} else {
		m.addsize = &u
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *FilesMutation) AddedSize() (r int64, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *FilesMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// AddSafeIDs adds the "saves" edge to the Saves entity by ids.
func (m *FilesMutation) AddSafeIDs(ids ...uint64) {
	if m.saves == nil {
		m.saves = make(map[uint64]struct{})
	}
	for i := range ids {
		m.saves[ids[i]] = struct{}{}
	}
}

// ClearSaves clears the "saves" edge to the Saves entity.
func (m *FilesMutation) ClearSaves() {
	m.clearedsaves = true
}

// SavesCleared reports if the "saves" edge to the Saves entity was cleared.
func (m *FilesMutation) SavesCleared() bool {
	return m.clearedsaves
}

// RemoveSafeIDs removes the "saves" edge to the Saves entity by IDs.
func (m *FilesMutation) RemoveSafeIDs(ids ...uint64) {
	if m.removedsaves == nil {
		m.removedsaves = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.saves, ids[i])
		m.removedsaves[ids[i]] = struct{}{}
	}
}

// RemovedSaves returns the removed IDs of the "saves" edge to the Saves entity.
func (m *FilesMutation) RemovedSavesIDs() (ids []uint64) {
	for id := range m.removedsaves {
		ids = append(ids, id)
	}
	return
}

// SavesIDs returns the "saves" edge IDs in the mutation.
func (m *FilesMutation) SavesIDs() (ids []uint64) {
	for id := range m.saves {
		ids = append(ids, id)
	}
	return
}

// ResetSaves resets all changes to the "saves" edge.
func (m *FilesMutation) ResetSaves() {
	m.saves = nil
	m.clearedsaves = false
	m.removedsaves = nil
}

// Where appends a list predicates to the FilesMutation builder.
func (m *FilesMutation) Where(ps ...predicate.Files) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FilesMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FilesMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Files, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FilesMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FilesMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Files).
func (m *FilesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FilesMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.hash != nil {
		fields = append(fields, files.FieldHash)
	}
	if m.name != nil {
		fields = append(fields, files.FieldName)
	}
	if m.size != nil {
		fields = append(fields, files.FieldSize)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FilesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case files.FieldHash:
		return m.Hash()
	case files.FieldName:
		return m.Name()
	case files.FieldSize:
		return m.Size()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FilesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case files.FieldHash:
		return m.OldHash(ctx)
	case files.FieldName:
		return m.OldName(ctx)
	case files.FieldSize:
		return m.OldSize(ctx)
	}
	return nil, fmt.Errorf("unknown Files field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FilesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case files.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	case files.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case files.FieldSize:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	}
	return fmt.Errorf("unknown Files field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FilesMutation) AddedFields() []string {
	var fields []string
	if m.addsize != nil {
		fields = append(fields, files.FieldSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FilesMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case files.FieldSize:
		return m.AddedSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FilesMutation) AddField(name string, value ent.Value) error {
	switch name {
	case files.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	}
	return fmt.Errorf("unknown Files numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FilesMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FilesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FilesMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Files nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FilesMutation) ResetField(name string) error {
	switch name {
	case files.FieldHash:
		m.ResetHash()
		return nil
	case files.FieldName:
		m.ResetName()
		return nil
	case files.FieldSize:
		m.ResetSize()
		return nil
	}
	return fmt.Errorf("unknown Files field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FilesMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.saves != nil {
		edges = append(edges, files.EdgeSaves)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FilesMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case files.EdgeSaves:
		ids := make([]ent.Value, 0, len(m.saves))
		for id := range m.saves {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FilesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsaves != nil {
		edges = append(edges, files.EdgeSaves)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FilesMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case files.EdgeSaves:
		ids := make([]ent.Value, 0, len(m.removedsaves))
		for id := range m.removedsaves {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FilesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsaves {
		edges = append(edges, files.EdgeSaves)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FilesMutation) EdgeCleared(name string) bool {
	switch name {
	case files.EdgeSaves:
		return m.clearedsaves
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FilesMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Files unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FilesMutation) ResetEdge(name string) error {
	switch name {
	case files.EdgeSaves:
		m.ResetSaves()
		return nil
	}
	return fmt.Errorf("unknown Files edge %s", name)
}

// SavesMutation represents an operation that mutates the Saves nodes in the graph.
type SavesMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	create_time   *time.Time
	update_time   *time.Time
	name          *string
	caption       *string
	clearedFields map[string]struct{}
	file          *uint64
	clearedfile   bool
	owner         *uint64
	clearedowner  bool
	dir           map[uint64]struct{}
	removeddir    map[uint64]struct{}
	cleareddir    bool
	done          bool
	oldValue      func(context.Context) (*Saves, error)
	predicates    []predicate.Saves
}

var _ ent.Mutation = (*SavesMutation)(nil)

// savesOption allows management of the mutation configuration using functional options.
type savesOption func(*SavesMutation)

// newSavesMutation creates new mutation for the Saves entity.
func newSavesMutation(c config, op Op, opts ...savesOption) *SavesMutation {
	m := &SavesMutation{
		config:        c,
		op:            op,
		typ:           TypeSaves,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSavesID sets the ID field of the mutation.
func withSavesID(id uint64) savesOption {
	return func(m *SavesMutation) {
		var (
			err   error
			once  sync.Once
			value *Saves
		)
		m.oldValue = func(ctx context.Context) (*Saves, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Saves.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSaves sets the old Saves of the mutation.
func withSaves(node *Saves) savesOption {
	return func(m *SavesMutation) {
		m.oldValue = func(context.Context) (*Saves, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SavesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SavesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Saves entities.
func (m *SavesMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SavesMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SavesMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Saves.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *SavesMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *SavesMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Saves entity.
// If the Saves object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SavesMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *SavesMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *SavesMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *SavesMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Saves entity.
// If the Saves object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SavesMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *SavesMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *SavesMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SavesMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Saves entity.
// If the Saves object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SavesMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SavesMutation) ResetName() {
	m.name = nil
}

// SetCaption sets the "caption" field.
func (m *SavesMutation) SetCaption(s string) {
	m.caption = &s
}

// Caption returns the value of the "caption" field in the mutation.
func (m *SavesMutation) Caption() (r string, exists bool) {
	v := m.caption
	if v == nil {
		return
	}
	return *v, true
}

// OldCaption returns the old "caption" field's value of the Saves entity.
// If the Saves object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SavesMutation) OldCaption(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCaption is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCaption requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCaption: %w", err)
	}
	return oldValue.Caption, nil
}

// ClearCaption clears the value of the "caption" field.
func (m *SavesMutation) ClearCaption() {
	m.caption = nil
	m.clearedFields[saves.FieldCaption] = struct{}{}
}

// CaptionCleared returns if the "caption" field was cleared in this mutation.
func (m *SavesMutation) CaptionCleared() bool {
	_, ok := m.clearedFields[saves.FieldCaption]
	return ok
}

// ResetCaption resets all changes to the "caption" field.
func (m *SavesMutation) ResetCaption() {
	m.caption = nil
	delete(m.clearedFields, saves.FieldCaption)
}

// SetFileID sets the "file" edge to the Files entity by id.
func (m *SavesMutation) SetFileID(id uint64) {
	m.file = &id
}

// ClearFile clears the "file" edge to the Files entity.
func (m *SavesMutation) ClearFile() {
	m.clearedfile = true
}

// FileCleared reports if the "file" edge to the Files entity was cleared.
func (m *SavesMutation) FileCleared() bool {
	return m.clearedfile
}

// FileID returns the "file" edge ID in the mutation.
func (m *SavesMutation) FileID() (id uint64, exists bool) {
	if m.file != nil {
		return *m.file, true
	}
	return
}

// FileIDs returns the "file" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FileID instead. It exists only for internal usage by the builders.
func (m *SavesMutation) FileIDs() (ids []uint64) {
	if id := m.file; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFile resets all changes to the "file" edge.
func (m *SavesMutation) ResetFile() {
	m.file = nil
	m.clearedfile = false
}

// SetOwnerID sets the "owner" edge to the Users entity by id.
func (m *SavesMutation) SetOwnerID(id uint64) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the Users entity.
func (m *SavesMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the Users entity was cleared.
func (m *SavesMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *SavesMutation) OwnerID() (id uint64, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *SavesMutation) OwnerIDs() (ids []uint64) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *SavesMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddDirIDs adds the "dir" edge to the Dirs entity by ids.
func (m *SavesMutation) AddDirIDs(ids ...uint64) {
	if m.dir == nil {
		m.dir = make(map[uint64]struct{})
	}
	for i := range ids {
		m.dir[ids[i]] = struct{}{}
	}
}

// ClearDir clears the "dir" edge to the Dirs entity.
func (m *SavesMutation) ClearDir() {
	m.cleareddir = true
}

// DirCleared reports if the "dir" edge to the Dirs entity was cleared.
func (m *SavesMutation) DirCleared() bool {
	return m.cleareddir
}

// RemoveDirIDs removes the "dir" edge to the Dirs entity by IDs.
func (m *SavesMutation) RemoveDirIDs(ids ...uint64) {
	if m.removeddir == nil {
		m.removeddir = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.dir, ids[i])
		m.removeddir[ids[i]] = struct{}{}
	}
}

// RemovedDir returns the removed IDs of the "dir" edge to the Dirs entity.
func (m *SavesMutation) RemovedDirIDs() (ids []uint64) {
	for id := range m.removeddir {
		ids = append(ids, id)
	}
	return
}

// DirIDs returns the "dir" edge IDs in the mutation.
func (m *SavesMutation) DirIDs() (ids []uint64) {
	for id := range m.dir {
		ids = append(ids, id)
	}
	return
}

// ResetDir resets all changes to the "dir" edge.
func (m *SavesMutation) ResetDir() {
	m.dir = nil
	m.cleareddir = false
	m.removeddir = nil
}

// Where appends a list predicates to the SavesMutation builder.
func (m *SavesMutation) Where(ps ...predicate.Saves) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SavesMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SavesMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Saves, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SavesMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SavesMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Saves).
func (m *SavesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SavesMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, saves.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, saves.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, saves.FieldName)
	}
	if m.caption != nil {
		fields = append(fields, saves.FieldCaption)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SavesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case saves.FieldCreateTime:
		return m.CreateTime()
	case saves.FieldUpdateTime:
		return m.UpdateTime()
	case saves.FieldName:
		return m.Name()
	case saves.FieldCaption:
		return m.Caption()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SavesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case saves.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case saves.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case saves.FieldName:
		return m.OldName(ctx)
	case saves.FieldCaption:
		return m.OldCaption(ctx)
	}
	return nil, fmt.Errorf("unknown Saves field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SavesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case saves.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case saves.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case saves.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case saves.FieldCaption:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCaption(v)
		return nil
	}
	return fmt.Errorf("unknown Saves field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SavesMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SavesMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SavesMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Saves numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SavesMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(saves.FieldCaption) {
		fields = append(fields, saves.FieldCaption)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SavesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SavesMutation) ClearField(name string) error {
	switch name {
	case saves.FieldCaption:
		m.ClearCaption()
		return nil
	}
	return fmt.Errorf("unknown Saves nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SavesMutation) ResetField(name string) error {
	switch name {
	case saves.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case saves.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case saves.FieldName:
		m.ResetName()
		return nil
	case saves.FieldCaption:
		m.ResetCaption()
		return nil
	}
	return fmt.Errorf("unknown Saves field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SavesMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.file != nil {
		edges = append(edges, saves.EdgeFile)
	}
	if m.owner != nil {
		edges = append(edges, saves.EdgeOwner)
	}
	if m.dir != nil {
		edges = append(edges, saves.EdgeDir)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SavesMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case saves.EdgeFile:
		if id := m.file; id != nil {
			return []ent.Value{*id}
		}
	case saves.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case saves.EdgeDir:
		ids := make([]ent.Value, 0, len(m.dir))
		for id := range m.dir {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SavesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeddir != nil {
		edges = append(edges, saves.EdgeDir)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SavesMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case saves.EdgeDir:
		ids := make([]ent.Value, 0, len(m.removeddir))
		for id := range m.removeddir {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SavesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedfile {
		edges = append(edges, saves.EdgeFile)
	}
	if m.clearedowner {
		edges = append(edges, saves.EdgeOwner)
	}
	if m.cleareddir {
		edges = append(edges, saves.EdgeDir)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SavesMutation) EdgeCleared(name string) bool {
	switch name {
	case saves.EdgeFile:
		return m.clearedfile
	case saves.EdgeOwner:
		return m.clearedowner
	case saves.EdgeDir:
		return m.cleareddir
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SavesMutation) ClearEdge(name string) error {
	switch name {
	case saves.EdgeFile:
		m.ClearFile()
		return nil
	case saves.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Saves unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SavesMutation) ResetEdge(name string) error {
	switch name {
	case saves.EdgeFile:
		m.ResetFile()
		return nil
	case saves.EdgeOwner:
		m.ResetOwner()
		return nil
	case saves.EdgeDir:
		m.ResetDir()
		return nil
	}
	return fmt.Errorf("unknown Saves edge %s", name)
}

// UsersMutation represents an operation that mutates the Users nodes in the graph.
type UsersMutation struct {
	config
	op             Op
	typ            string
	id             *uint64
	create_time    *time.Time
	update_time    *time.Time
	username       *string
	password       *string
	email          *string
	name           *string
	bio            *string
	avatar         *string
	clearedFields  map[string]struct{}
	devices        map[uint64]struct{}
	removeddevices map[uint64]struct{}
	cleareddevices bool
	dirs           map[uint64]struct{}
	removeddirs    map[uint64]struct{}
	cleareddirs    bool
	saves          map[uint64]struct{}
	removedsaves   map[uint64]struct{}
	clearedsaves   bool
	done           bool
	oldValue       func(context.Context) (*Users, error)
	predicates     []predicate.Users
}

var _ ent.Mutation = (*UsersMutation)(nil)

// usersOption allows management of the mutation configuration using functional options.
type usersOption func(*UsersMutation)

// newUsersMutation creates new mutation for the Users entity.
func newUsersMutation(c config, op Op, opts ...usersOption) *UsersMutation {
	m := &UsersMutation{
		config:        c,
		op:            op,
		typ:           TypeUsers,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUsersID sets the ID field of the mutation.
func withUsersID(id uint64) usersOption {
	return func(m *UsersMutation) {
		var (
			err   error
			once  sync.Once
			value *Users
		)
		m.oldValue = func(ctx context.Context) (*Users, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Users.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUsers sets the old Users of the mutation.
func withUsers(node *Users) usersOption {
	return func(m *UsersMutation) {
		m.oldValue = func(context.Context) (*Users, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UsersMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UsersMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Users entities.
func (m *UsersMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UsersMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UsersMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Users.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UsersMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UsersMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UsersMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UsersMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UsersMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UsersMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUsername sets the "username" field.
func (m *UsersMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UsersMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UsersMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UsersMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UsersMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ClearPassword clears the value of the "password" field.
func (m *UsersMutation) ClearPassword() {
	m.password = nil
	m.clearedFields[users.FieldPassword] = struct{}{}
}

// PasswordCleared returns if the "password" field was cleared in this mutation.
func (m *UsersMutation) PasswordCleared() bool {
	_, ok := m.clearedFields[users.FieldPassword]
	return ok
}

// ResetPassword resets all changes to the "password" field.
func (m *UsersMutation) ResetPassword() {
	m.password = nil
	delete(m.clearedFields, users.FieldPassword)
}

// SetEmail sets the "email" field.
func (m *UsersMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UsersMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *UsersMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[users.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *UsersMutation) EmailCleared() bool {
	_, ok := m.clearedFields[users.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *UsersMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, users.FieldEmail)
}

// SetName sets the "name" field.
func (m *UsersMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UsersMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *UsersMutation) ClearName() {
	m.name = nil
	m.clearedFields[users.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *UsersMutation) NameCleared() bool {
	_, ok := m.clearedFields[users.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *UsersMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, users.FieldName)
}

// SetBio sets the "bio" field.
func (m *UsersMutation) SetBio(s string) {
	m.bio = &s
}

// Bio returns the value of the "bio" field in the mutation.
func (m *UsersMutation) Bio() (r string, exists bool) {
	v := m.bio
	if v == nil {
		return
	}
	return *v, true
}

// OldBio returns the old "bio" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldBio(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBio is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBio requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBio: %w", err)
	}
	return oldValue.Bio, nil
}

// ClearBio clears the value of the "bio" field.
func (m *UsersMutation) ClearBio() {
	m.bio = nil
	m.clearedFields[users.FieldBio] = struct{}{}
}

// BioCleared returns if the "bio" field was cleared in this mutation.
func (m *UsersMutation) BioCleared() bool {
	_, ok := m.clearedFields[users.FieldBio]
	return ok
}

// ResetBio resets all changes to the "bio" field.
func (m *UsersMutation) ResetBio() {
	m.bio = nil
	delete(m.clearedFields, users.FieldBio)
}

// SetAvatar sets the "avatar" field.
func (m *UsersMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *UsersMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *UsersMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[users.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *UsersMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[users.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *UsersMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, users.FieldAvatar)
}

// AddDeviceIDs adds the "devices" edge to the Devices entity by ids.
func (m *UsersMutation) AddDeviceIDs(ids ...uint64) {
	if m.devices == nil {
		m.devices = make(map[uint64]struct{})
	}
	for i := range ids {
		m.devices[ids[i]] = struct{}{}
	}
}

// ClearDevices clears the "devices" edge to the Devices entity.
func (m *UsersMutation) ClearDevices() {
	m.cleareddevices = true
}

// DevicesCleared reports if the "devices" edge to the Devices entity was cleared.
func (m *UsersMutation) DevicesCleared() bool {
	return m.cleareddevices
}

// RemoveDeviceIDs removes the "devices" edge to the Devices entity by IDs.
func (m *UsersMutation) RemoveDeviceIDs(ids ...uint64) {
	if m.removeddevices == nil {
		m.removeddevices = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.devices, ids[i])
		m.removeddevices[ids[i]] = struct{}{}
	}
}

// RemovedDevices returns the removed IDs of the "devices" edge to the Devices entity.
func (m *UsersMutation) RemovedDevicesIDs() (ids []uint64) {
	for id := range m.removeddevices {
		ids = append(ids, id)
	}
	return
}

// DevicesIDs returns the "devices" edge IDs in the mutation.
func (m *UsersMutation) DevicesIDs() (ids []uint64) {
	for id := range m.devices {
		ids = append(ids, id)
	}
	return
}

// ResetDevices resets all changes to the "devices" edge.
func (m *UsersMutation) ResetDevices() {
	m.devices = nil
	m.cleareddevices = false
	m.removeddevices = nil
}

// AddDirIDs adds the "dirs" edge to the Dirs entity by ids.
func (m *UsersMutation) AddDirIDs(ids ...uint64) {
	if m.dirs == nil {
		m.dirs = make(map[uint64]struct{})
	}
	for i := range ids {
		m.dirs[ids[i]] = struct{}{}
	}
}

// ClearDirs clears the "dirs" edge to the Dirs entity.
func (m *UsersMutation) ClearDirs() {
	m.cleareddirs = true
}

// DirsCleared reports if the "dirs" edge to the Dirs entity was cleared.
func (m *UsersMutation) DirsCleared() bool {
	return m.cleareddirs
}

// RemoveDirIDs removes the "dirs" edge to the Dirs entity by IDs.
func (m *UsersMutation) RemoveDirIDs(ids ...uint64) {
	if m.removeddirs == nil {
		m.removeddirs = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.dirs, ids[i])
		m.removeddirs[ids[i]] = struct{}{}
	}
}

// RemovedDirs returns the removed IDs of the "dirs" edge to the Dirs entity.
func (m *UsersMutation) RemovedDirsIDs() (ids []uint64) {
	for id := range m.removeddirs {
		ids = append(ids, id)
	}
	return
}

// DirsIDs returns the "dirs" edge IDs in the mutation.
func (m *UsersMutation) DirsIDs() (ids []uint64) {
	for id := range m.dirs {
		ids = append(ids, id)
	}
	return
}

// ResetDirs resets all changes to the "dirs" edge.
func (m *UsersMutation) ResetDirs() {
	m.dirs = nil
	m.cleareddirs = false
	m.removeddirs = nil
}

// AddSafeIDs adds the "saves" edge to the Saves entity by ids.
func (m *UsersMutation) AddSafeIDs(ids ...uint64) {
	if m.saves == nil {
		m.saves = make(map[uint64]struct{})
	}
	for i := range ids {
		m.saves[ids[i]] = struct{}{}
	}
}

// ClearSaves clears the "saves" edge to the Saves entity.
func (m *UsersMutation) ClearSaves() {
	m.clearedsaves = true
}

// SavesCleared reports if the "saves" edge to the Saves entity was cleared.
func (m *UsersMutation) SavesCleared() bool {
	return m.clearedsaves
}

// RemoveSafeIDs removes the "saves" edge to the Saves entity by IDs.
func (m *UsersMutation) RemoveSafeIDs(ids ...uint64) {
	if m.removedsaves == nil {
		m.removedsaves = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.saves, ids[i])
		m.removedsaves[ids[i]] = struct{}{}
	}
}

// RemovedSaves returns the removed IDs of the "saves" edge to the Saves entity.
func (m *UsersMutation) RemovedSavesIDs() (ids []uint64) {
	for id := range m.removedsaves {
		ids = append(ids, id)
	}
	return
}

// SavesIDs returns the "saves" edge IDs in the mutation.
func (m *UsersMutation) SavesIDs() (ids []uint64) {
	for id := range m.saves {
		ids = append(ids, id)
	}
	return
}

// ResetSaves resets all changes to the "saves" edge.
func (m *UsersMutation) ResetSaves() {
	m.saves = nil
	m.clearedsaves = false
	m.removedsaves = nil
}

// Where appends a list predicates to the UsersMutation builder.
func (m *UsersMutation) Where(ps ...predicate.Users) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UsersMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UsersMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Users, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UsersMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UsersMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Users).
func (m *UsersMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UsersMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, users.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, users.FieldUpdateTime)
	}
	if m.username != nil {
		fields = append(fields, users.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, users.FieldPassword)
	}
	if m.email != nil {
		fields = append(fields, users.FieldEmail)
	}
	if m.name != nil {
		fields = append(fields, users.FieldName)
	}
	if m.bio != nil {
		fields = append(fields, users.FieldBio)
	}
	if m.avatar != nil {
		fields = append(fields, users.FieldAvatar)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UsersMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case users.FieldCreateTime:
		return m.CreateTime()
	case users.FieldUpdateTime:
		return m.UpdateTime()
	case users.FieldUsername:
		return m.Username()
	case users.FieldPassword:
		return m.Password()
	case users.FieldEmail:
		return m.Email()
	case users.FieldName:
		return m.Name()
	case users.FieldBio:
		return m.Bio()
	case users.FieldAvatar:
		return m.Avatar()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UsersMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case users.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case users.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case users.FieldUsername:
		return m.OldUsername(ctx)
	case users.FieldPassword:
		return m.OldPassword(ctx)
	case users.FieldEmail:
		return m.OldEmail(ctx)
	case users.FieldName:
		return m.OldName(ctx)
	case users.FieldBio:
		return m.OldBio(ctx)
	case users.FieldAvatar:
		return m.OldAvatar(ctx)
	}
	return nil, fmt.Errorf("unknown Users field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UsersMutation) SetField(name string, value ent.Value) error {
	switch name {
	case users.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case users.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case users.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case users.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case users.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case users.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case users.FieldBio:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBio(v)
		return nil
	case users.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	}
	return fmt.Errorf("unknown Users field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UsersMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UsersMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UsersMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Users numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UsersMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(users.FieldPassword) {
		fields = append(fields, users.FieldPassword)
	}
	if m.FieldCleared(users.FieldEmail) {
		fields = append(fields, users.FieldEmail)
	}
	if m.FieldCleared(users.FieldName) {
		fields = append(fields, users.FieldName)
	}
	if m.FieldCleared(users.FieldBio) {
		fields = append(fields, users.FieldBio)
	}
	if m.FieldCleared(users.FieldAvatar) {
		fields = append(fields, users.FieldAvatar)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UsersMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UsersMutation) ClearField(name string) error {
	switch name {
	case users.FieldPassword:
		m.ClearPassword()
		return nil
	case users.FieldEmail:
		m.ClearEmail()
		return nil
	case users.FieldName:
		m.ClearName()
		return nil
	case users.FieldBio:
		m.ClearBio()
		return nil
	case users.FieldAvatar:
		m.ClearAvatar()
		return nil
	}
	return fmt.Errorf("unknown Users nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UsersMutation) ResetField(name string) error {
	switch name {
	case users.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case users.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case users.FieldUsername:
		m.ResetUsername()
		return nil
	case users.FieldPassword:
		m.ResetPassword()
		return nil
	case users.FieldEmail:
		m.ResetEmail()
		return nil
	case users.FieldName:
		m.ResetName()
		return nil
	case users.FieldBio:
		m.ResetBio()
		return nil
	case users.FieldAvatar:
		m.ResetAvatar()
		return nil
	}
	return fmt.Errorf("unknown Users field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UsersMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.devices != nil {
		edges = append(edges, users.EdgeDevices)
	}
	if m.dirs != nil {
		edges = append(edges, users.EdgeDirs)
	}
	if m.saves != nil {
		edges = append(edges, users.EdgeSaves)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UsersMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case users.EdgeDevices:
		ids := make([]ent.Value, 0, len(m.devices))
		for id := range m.devices {
			ids = append(ids, id)
		}
		return ids
	case users.EdgeDirs:
		ids := make([]ent.Value, 0, len(m.dirs))
		for id := range m.dirs {
			ids = append(ids, id)
		}
		return ids
	case users.EdgeSaves:
		ids := make([]ent.Value, 0, len(m.saves))
		for id := range m.saves {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UsersMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeddevices != nil {
		edges = append(edges, users.EdgeDevices)
	}
	if m.removeddirs != nil {
		edges = append(edges, users.EdgeDirs)
	}
	if m.removedsaves != nil {
		edges = append(edges, users.EdgeSaves)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UsersMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case users.EdgeDevices:
		ids := make([]ent.Value, 0, len(m.removeddevices))
		for id := range m.removeddevices {
			ids = append(ids, id)
		}
		return ids
	case users.EdgeDirs:
		ids := make([]ent.Value, 0, len(m.removeddirs))
		for id := range m.removeddirs {
			ids = append(ids, id)
		}
		return ids
	case users.EdgeSaves:
		ids := make([]ent.Value, 0, len(m.removedsaves))
		for id := range m.removedsaves {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UsersMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareddevices {
		edges = append(edges, users.EdgeDevices)
	}
	if m.cleareddirs {
		edges = append(edges, users.EdgeDirs)
	}
	if m.clearedsaves {
		edges = append(edges, users.EdgeSaves)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UsersMutation) EdgeCleared(name string) bool {
	switch name {
	case users.EdgeDevices:
		return m.cleareddevices
	case users.EdgeDirs:
		return m.cleareddirs
	case users.EdgeSaves:
		return m.clearedsaves
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UsersMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Users unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UsersMutation) ResetEdge(name string) error {
	switch name {
	case users.EdgeDevices:
		m.ResetDevices()
		return nil
	case users.EdgeDirs:
		m.ResetDirs()
		return nil
	case users.EdgeSaves:
		m.ResetSaves()
		return nil
	}
	return fmt.Errorf("unknown Users edge %s", name)
}
