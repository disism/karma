// Code generated by ent, DO NOT EDIT.

package files

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the files type in the database.
	Label = "files"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// EdgeSaves holds the string denoting the saves edge name in mutations.
	EdgeSaves = "saves"
	// Table holds the table name of the files in the database.
	Table = "files"
	// SavesTable is the table that holds the saves relation/edge.
	SavesTable = "saves"
	// SavesInverseTable is the table name for the Saves entity.
	// It exists in this package in order to avoid circular dependency with the "saves" package.
	SavesInverseTable = "saves"
	// SavesColumn is the table column denoting the saves relation/edge.
	SavesColumn = "files_saves"
)

// Columns holds all SQL columns for files fields.
var Columns = []string{
	FieldID,
	FieldHash,
	FieldName,
	FieldSize,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the Files queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHash orders the results by the hash field.
func ByHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHash, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// BySavesCount orders the results by saves count.
func BySavesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSavesStep(), opts...)
	}
}

// BySaves orders the results by saves terms.
func BySaves(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSavesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSavesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SavesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SavesTable, SavesColumn),
	)
}
