// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/disism/karma/ent/devices"
	"github.com/disism/karma/ent/dirs"
	"github.com/disism/karma/ent/files"
	"github.com/disism/karma/ent/saves"
	"github.com/disism/karma/ent/schema"
	"github.com/disism/karma/ent/users"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	devicesMixin := schema.Devices{}.Mixin()
	devicesMixinFields1 := devicesMixin[1].Fields()
	_ = devicesMixinFields1
	devicesFields := schema.Devices{}.Fields()
	_ = devicesFields
	// devicesDescCreateTime is the schema descriptor for create_time field.
	devicesDescCreateTime := devicesMixinFields1[0].Descriptor()
	// devices.DefaultCreateTime holds the default value on creation for the create_time field.
	devices.DefaultCreateTime = devicesDescCreateTime.Default.(func() time.Time)
	// devicesDescUpdateTime is the schema descriptor for update_time field.
	devicesDescUpdateTime := devicesMixinFields1[1].Descriptor()
	// devices.DefaultUpdateTime holds the default value on creation for the update_time field.
	devices.DefaultUpdateTime = devicesDescUpdateTime.Default.(func() time.Time)
	// devices.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	devices.UpdateDefaultUpdateTime = devicesDescUpdateTime.UpdateDefault.(func() time.Time)
	dirsMixin := schema.Dirs{}.Mixin()
	dirsMixinFields1 := dirsMixin[1].Fields()
	_ = dirsMixinFields1
	dirsFields := schema.Dirs{}.Fields()
	_ = dirsFields
	// dirsDescCreateTime is the schema descriptor for create_time field.
	dirsDescCreateTime := dirsMixinFields1[0].Descriptor()
	// dirs.DefaultCreateTime holds the default value on creation for the create_time field.
	dirs.DefaultCreateTime = dirsDescCreateTime.Default.(func() time.Time)
	// dirsDescUpdateTime is the schema descriptor for update_time field.
	dirsDescUpdateTime := dirsMixinFields1[1].Descriptor()
	// dirs.DefaultUpdateTime holds the default value on creation for the update_time field.
	dirs.DefaultUpdateTime = dirsDescUpdateTime.Default.(func() time.Time)
	// dirs.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	dirs.UpdateDefaultUpdateTime = dirsDescUpdateTime.UpdateDefault.(func() time.Time)
	filesFields := schema.Files{}.Fields()
	_ = filesFields
	// filesDescName is the schema descriptor for name field.
	filesDescName := filesFields[1].Descriptor()
	// files.NameValidator is a validator for the "name" field. It is called by the builders before save.
	files.NameValidator = filesDescName.Validators[0].(func(string) error)
	savesMixin := schema.Saves{}.Mixin()
	savesMixinFields0 := savesMixin[0].Fields()
	_ = savesMixinFields0
	savesFields := schema.Saves{}.Fields()
	_ = savesFields
	// savesDescCreateTime is the schema descriptor for create_time field.
	savesDescCreateTime := savesMixinFields0[0].Descriptor()
	// saves.DefaultCreateTime holds the default value on creation for the create_time field.
	saves.DefaultCreateTime = savesDescCreateTime.Default.(func() time.Time)
	// savesDescUpdateTime is the schema descriptor for update_time field.
	savesDescUpdateTime := savesMixinFields0[1].Descriptor()
	// saves.DefaultUpdateTime holds the default value on creation for the update_time field.
	saves.DefaultUpdateTime = savesDescUpdateTime.Default.(func() time.Time)
	// saves.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	saves.UpdateDefaultUpdateTime = savesDescUpdateTime.UpdateDefault.(func() time.Time)
	// savesDescName is the schema descriptor for name field.
	savesDescName := savesFields[0].Descriptor()
	// saves.NameValidator is a validator for the "name" field. It is called by the builders before save.
	saves.NameValidator = savesDescName.Validators[0].(func(string) error)
	// savesDescCaption is the schema descriptor for caption field.
	savesDescCaption := savesFields[1].Descriptor()
	// saves.CaptionValidator is a validator for the "caption" field. It is called by the builders before save.
	saves.CaptionValidator = savesDescCaption.Validators[0].(func(string) error)
	usersMixin := schema.Users{}.Mixin()
	usersMixinFields1 := usersMixin[1].Fields()
	_ = usersMixinFields1
	usersFields := schema.Users{}.Fields()
	_ = usersFields
	// usersDescCreateTime is the schema descriptor for create_time field.
	usersDescCreateTime := usersMixinFields1[0].Descriptor()
	// users.DefaultCreateTime holds the default value on creation for the create_time field.
	users.DefaultCreateTime = usersDescCreateTime.Default.(func() time.Time)
	// usersDescUpdateTime is the schema descriptor for update_time field.
	usersDescUpdateTime := usersMixinFields1[1].Descriptor()
	// users.DefaultUpdateTime holds the default value on creation for the update_time field.
	users.DefaultUpdateTime = usersDescUpdateTime.Default.(func() time.Time)
	// users.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	users.UpdateDefaultUpdateTime = usersDescUpdateTime.UpdateDefault.(func() time.Time)
	// usersDescUsername is the schema descriptor for username field.
	usersDescUsername := usersFields[0].Descriptor()
	// users.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	users.UsernameValidator = func() func(string) error {
		validators := usersDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
