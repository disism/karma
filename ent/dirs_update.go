// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/disism/karma/ent/dirs"
	"github.com/disism/karma/ent/predicate"
	"github.com/disism/karma/ent/saves"
	"github.com/disism/karma/ent/users"
)

// DirsUpdate is the builder for updating Dirs entities.
type DirsUpdate struct {
	config
	hooks    []Hook
	mutation *DirsMutation
}

// Where appends a list predicates to the DirsUpdate builder.
func (du *DirsUpdate) Where(ps ...predicate.Dirs) *DirsUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetUpdateTime sets the "update_time" field.
func (du *DirsUpdate) SetUpdateTime(t time.Time) *DirsUpdate {
	du.mutation.SetUpdateTime(t)
	return du
}

// SetName sets the "name" field.
func (du *DirsUpdate) SetName(s string) *DirsUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DirsUpdate) SetNillableName(s *string) *DirsUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// SetOwnerID sets the "owner" edge to the Users entity by ID.
func (du *DirsUpdate) SetOwnerID(id uint64) *DirsUpdate {
	du.mutation.SetOwnerID(id)
	return du
}

// SetNillableOwnerID sets the "owner" edge to the Users entity by ID if the given value is not nil.
func (du *DirsUpdate) SetNillableOwnerID(id *uint64) *DirsUpdate {
	if id != nil {
		du = du.SetOwnerID(*id)
	}
	return du
}

// SetOwner sets the "owner" edge to the Users entity.
func (du *DirsUpdate) SetOwner(u *Users) *DirsUpdate {
	return du.SetOwnerID(u.ID)
}

// AddSafeIDs adds the "saves" edge to the Saves entity by IDs.
func (du *DirsUpdate) AddSafeIDs(ids ...uint64) *DirsUpdate {
	du.mutation.AddSafeIDs(ids...)
	return du
}

// AddSaves adds the "saves" edges to the Saves entity.
func (du *DirsUpdate) AddSaves(s ...*Saves) *DirsUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return du.AddSafeIDs(ids...)
}

// AddSubdirIDs adds the "subdir" edge to the Dirs entity by IDs.
func (du *DirsUpdate) AddSubdirIDs(ids ...uint64) *DirsUpdate {
	du.mutation.AddSubdirIDs(ids...)
	return du
}

// AddSubdir adds the "subdir" edges to the Dirs entity.
func (du *DirsUpdate) AddSubdir(d ...*Dirs) *DirsUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddSubdirIDs(ids...)
}

// AddPdirIDs adds the "pdir" edge to the Dirs entity by IDs.
func (du *DirsUpdate) AddPdirIDs(ids ...uint64) *DirsUpdate {
	du.mutation.AddPdirIDs(ids...)
	return du
}

// AddPdir adds the "pdir" edges to the Dirs entity.
func (du *DirsUpdate) AddPdir(d ...*Dirs) *DirsUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddPdirIDs(ids...)
}

// Mutation returns the DirsMutation object of the builder.
func (du *DirsUpdate) Mutation() *DirsMutation {
	return du.mutation
}

// ClearOwner clears the "owner" edge to the Users entity.
func (du *DirsUpdate) ClearOwner() *DirsUpdate {
	du.mutation.ClearOwner()
	return du
}

// ClearSaves clears all "saves" edges to the Saves entity.
func (du *DirsUpdate) ClearSaves() *DirsUpdate {
	du.mutation.ClearSaves()
	return du
}

// RemoveSafeIDs removes the "saves" edge to Saves entities by IDs.
func (du *DirsUpdate) RemoveSafeIDs(ids ...uint64) *DirsUpdate {
	du.mutation.RemoveSafeIDs(ids...)
	return du
}

// RemoveSaves removes "saves" edges to Saves entities.
func (du *DirsUpdate) RemoveSaves(s ...*Saves) *DirsUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return du.RemoveSafeIDs(ids...)
}

// ClearSubdir clears all "subdir" edges to the Dirs entity.
func (du *DirsUpdate) ClearSubdir() *DirsUpdate {
	du.mutation.ClearSubdir()
	return du
}

// RemoveSubdirIDs removes the "subdir" edge to Dirs entities by IDs.
func (du *DirsUpdate) RemoveSubdirIDs(ids ...uint64) *DirsUpdate {
	du.mutation.RemoveSubdirIDs(ids...)
	return du
}

// RemoveSubdir removes "subdir" edges to Dirs entities.
func (du *DirsUpdate) RemoveSubdir(d ...*Dirs) *DirsUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveSubdirIDs(ids...)
}

// ClearPdir clears all "pdir" edges to the Dirs entity.
func (du *DirsUpdate) ClearPdir() *DirsUpdate {
	du.mutation.ClearPdir()
	return du
}

// RemovePdirIDs removes the "pdir" edge to Dirs entities by IDs.
func (du *DirsUpdate) RemovePdirIDs(ids ...uint64) *DirsUpdate {
	du.mutation.RemovePdirIDs(ids...)
	return du
}

// RemovePdir removes "pdir" edges to Dirs entities.
func (du *DirsUpdate) RemovePdir(d ...*Dirs) *DirsUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemovePdirIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DirsUpdate) Save(ctx context.Context) (int, error) {
	du.defaults()
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DirsUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DirsUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DirsUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DirsUpdate) defaults() {
	if _, ok := du.mutation.UpdateTime(); !ok {
		v := dirs.UpdateDefaultUpdateTime()
		du.mutation.SetUpdateTime(v)
	}
}

func (du *DirsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(dirs.Table, dirs.Columns, sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.UpdateTime(); ok {
		_spec.SetField(dirs.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(dirs.FieldName, field.TypeString, value)
	}
	if du.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dirs.OwnerTable,
			Columns: []string{dirs.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dirs.OwnerTable,
			Columns: []string{dirs.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.SavesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dirs.SavesTable,
			Columns: dirs.SavesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(saves.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedSavesIDs(); len(nodes) > 0 && !du.mutation.SavesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dirs.SavesTable,
			Columns: dirs.SavesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(saves.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.SavesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dirs.SavesTable,
			Columns: dirs.SavesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(saves.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.SubdirCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dirs.SubdirTable,
			Columns: dirs.SubdirPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedSubdirIDs(); len(nodes) > 0 && !du.mutation.SubdirCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dirs.SubdirTable,
			Columns: dirs.SubdirPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.SubdirIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dirs.SubdirTable,
			Columns: dirs.SubdirPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.PdirCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dirs.PdirTable,
			Columns: dirs.PdirPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedPdirIDs(); len(nodes) > 0 && !du.mutation.PdirCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dirs.PdirTable,
			Columns: dirs.PdirPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.PdirIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dirs.PdirTable,
			Columns: dirs.PdirPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dirs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DirsUpdateOne is the builder for updating a single Dirs entity.
type DirsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DirsMutation
}

// SetUpdateTime sets the "update_time" field.
func (duo *DirsUpdateOne) SetUpdateTime(t time.Time) *DirsUpdateOne {
	duo.mutation.SetUpdateTime(t)
	return duo
}

// SetName sets the "name" field.
func (duo *DirsUpdateOne) SetName(s string) *DirsUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DirsUpdateOne) SetNillableName(s *string) *DirsUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// SetOwnerID sets the "owner" edge to the Users entity by ID.
func (duo *DirsUpdateOne) SetOwnerID(id uint64) *DirsUpdateOne {
	duo.mutation.SetOwnerID(id)
	return duo
}

// SetNillableOwnerID sets the "owner" edge to the Users entity by ID if the given value is not nil.
func (duo *DirsUpdateOne) SetNillableOwnerID(id *uint64) *DirsUpdateOne {
	if id != nil {
		duo = duo.SetOwnerID(*id)
	}
	return duo
}

// SetOwner sets the "owner" edge to the Users entity.
func (duo *DirsUpdateOne) SetOwner(u *Users) *DirsUpdateOne {
	return duo.SetOwnerID(u.ID)
}

// AddSafeIDs adds the "saves" edge to the Saves entity by IDs.
func (duo *DirsUpdateOne) AddSafeIDs(ids ...uint64) *DirsUpdateOne {
	duo.mutation.AddSafeIDs(ids...)
	return duo
}

// AddSaves adds the "saves" edges to the Saves entity.
func (duo *DirsUpdateOne) AddSaves(s ...*Saves) *DirsUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return duo.AddSafeIDs(ids...)
}

// AddSubdirIDs adds the "subdir" edge to the Dirs entity by IDs.
func (duo *DirsUpdateOne) AddSubdirIDs(ids ...uint64) *DirsUpdateOne {
	duo.mutation.AddSubdirIDs(ids...)
	return duo
}

// AddSubdir adds the "subdir" edges to the Dirs entity.
func (duo *DirsUpdateOne) AddSubdir(d ...*Dirs) *DirsUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddSubdirIDs(ids...)
}

// AddPdirIDs adds the "pdir" edge to the Dirs entity by IDs.
func (duo *DirsUpdateOne) AddPdirIDs(ids ...uint64) *DirsUpdateOne {
	duo.mutation.AddPdirIDs(ids...)
	return duo
}

// AddPdir adds the "pdir" edges to the Dirs entity.
func (duo *DirsUpdateOne) AddPdir(d ...*Dirs) *DirsUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddPdirIDs(ids...)
}

// Mutation returns the DirsMutation object of the builder.
func (duo *DirsUpdateOne) Mutation() *DirsMutation {
	return duo.mutation
}

// ClearOwner clears the "owner" edge to the Users entity.
func (duo *DirsUpdateOne) ClearOwner() *DirsUpdateOne {
	duo.mutation.ClearOwner()
	return duo
}

// ClearSaves clears all "saves" edges to the Saves entity.
func (duo *DirsUpdateOne) ClearSaves() *DirsUpdateOne {
	duo.mutation.ClearSaves()
	return duo
}

// RemoveSafeIDs removes the "saves" edge to Saves entities by IDs.
func (duo *DirsUpdateOne) RemoveSafeIDs(ids ...uint64) *DirsUpdateOne {
	duo.mutation.RemoveSafeIDs(ids...)
	return duo
}

// RemoveSaves removes "saves" edges to Saves entities.
func (duo *DirsUpdateOne) RemoveSaves(s ...*Saves) *DirsUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return duo.RemoveSafeIDs(ids...)
}

// ClearSubdir clears all "subdir" edges to the Dirs entity.
func (duo *DirsUpdateOne) ClearSubdir() *DirsUpdateOne {
	duo.mutation.ClearSubdir()
	return duo
}

// RemoveSubdirIDs removes the "subdir" edge to Dirs entities by IDs.
func (duo *DirsUpdateOne) RemoveSubdirIDs(ids ...uint64) *DirsUpdateOne {
	duo.mutation.RemoveSubdirIDs(ids...)
	return duo
}

// RemoveSubdir removes "subdir" edges to Dirs entities.
func (duo *DirsUpdateOne) RemoveSubdir(d ...*Dirs) *DirsUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveSubdirIDs(ids...)
}

// ClearPdir clears all "pdir" edges to the Dirs entity.
func (duo *DirsUpdateOne) ClearPdir() *DirsUpdateOne {
	duo.mutation.ClearPdir()
	return duo
}

// RemovePdirIDs removes the "pdir" edge to Dirs entities by IDs.
func (duo *DirsUpdateOne) RemovePdirIDs(ids ...uint64) *DirsUpdateOne {
	duo.mutation.RemovePdirIDs(ids...)
	return duo
}

// RemovePdir removes "pdir" edges to Dirs entities.
func (duo *DirsUpdateOne) RemovePdir(d ...*Dirs) *DirsUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemovePdirIDs(ids...)
}

// Where appends a list predicates to the DirsUpdate builder.
func (duo *DirsUpdateOne) Where(ps ...predicate.Dirs) *DirsUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DirsUpdateOne) Select(field string, fields ...string) *DirsUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Dirs entity.
func (duo *DirsUpdateOne) Save(ctx context.Context) (*Dirs, error) {
	duo.defaults()
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DirsUpdateOne) SaveX(ctx context.Context) *Dirs {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DirsUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DirsUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DirsUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdateTime(); !ok {
		v := dirs.UpdateDefaultUpdateTime()
		duo.mutation.SetUpdateTime(v)
	}
}

func (duo *DirsUpdateOne) sqlSave(ctx context.Context) (_node *Dirs, err error) {
	_spec := sqlgraph.NewUpdateSpec(dirs.Table, dirs.Columns, sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dirs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dirs.FieldID)
		for _, f := range fields {
			if !dirs.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dirs.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.UpdateTime(); ok {
		_spec.SetField(dirs.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(dirs.FieldName, field.TypeString, value)
	}
	if duo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dirs.OwnerTable,
			Columns: []string{dirs.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dirs.OwnerTable,
			Columns: []string{dirs.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.SavesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dirs.SavesTable,
			Columns: dirs.SavesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(saves.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedSavesIDs(); len(nodes) > 0 && !duo.mutation.SavesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dirs.SavesTable,
			Columns: dirs.SavesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(saves.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.SavesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dirs.SavesTable,
			Columns: dirs.SavesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(saves.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.SubdirCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dirs.SubdirTable,
			Columns: dirs.SubdirPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedSubdirIDs(); len(nodes) > 0 && !duo.mutation.SubdirCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dirs.SubdirTable,
			Columns: dirs.SubdirPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.SubdirIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dirs.SubdirTable,
			Columns: dirs.SubdirPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.PdirCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dirs.PdirTable,
			Columns: dirs.PdirPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedPdirIDs(); len(nodes) > 0 && !duo.mutation.PdirCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dirs.PdirTable,
			Columns: dirs.PdirPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.PdirIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dirs.PdirTable,
			Columns: dirs.PdirPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dirs.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Dirs{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dirs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
