// Code generated by ent, DO NOT EDIT.

package saves

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the saves type in the database.
	Label = "saves"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCaption holds the string denoting the caption field in the database.
	FieldCaption = "caption"
	// EdgeFile holds the string denoting the file edge name in mutations.
	EdgeFile = "file"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeDir holds the string denoting the dir edge name in mutations.
	EdgeDir = "dir"
	// Table holds the table name of the saves in the database.
	Table = "saves"
	// FileTable is the table that holds the file relation/edge.
	FileTable = "saves"
	// FileInverseTable is the table name for the Files entity.
	// It exists in this package in order to avoid circular dependency with the "files" package.
	FileInverseTable = "files"
	// FileColumn is the table column denoting the file relation/edge.
	FileColumn = "files_saves"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "saves"
	// OwnerInverseTable is the table name for the Users entity.
	// It exists in this package in order to avoid circular dependency with the "users" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "users_saves"
	// DirTable is the table that holds the dir relation/edge. The primary key declared below.
	DirTable = "dirs_saves"
	// DirInverseTable is the table name for the Dirs entity.
	// It exists in this package in order to avoid circular dependency with the "dirs" package.
	DirInverseTable = "dirs"
)

// Columns holds all SQL columns for saves fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldCaption,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "saves"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"files_saves",
	"users_saves",
}

var (
	// DirPrimaryKey and DirColumn2 are the table columns denoting the
	// primary key for the dir relation (M2M).
	DirPrimaryKey = []string{"dirs_id", "saves_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// CaptionValidator is a validator for the "caption" field. It is called by the builders before save.
	CaptionValidator func(string) error
)

// OrderOption defines the ordering options for the Saves queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCaption orders the results by the caption field.
func ByCaption(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaption, opts...).ToFunc()
}

// ByFileField orders the results by file field.
func ByFileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFileStep(), sql.OrderByField(field, opts...))
	}
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByDirCount orders the results by dir count.
func ByDirCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDirStep(), opts...)
	}
}

// ByDir orders the results by dir terms.
func ByDir(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDirStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FileTable, FileColumn),
	)
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newDirStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DirInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DirTable, DirPrimaryKey...),
	)
}
